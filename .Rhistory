#' Multiserver Queue Simulation
#'
#' @param Arrivals A numeric vector of customer arrival times.
#' @param ServiceTimes A numeric vector of customer service times.
#' @param NumServers Number of servers available in the system (default is 1).
#' @return A data frame with columns: `Arrivals`, `ServiceBegins`, `ChosenServer`, and `ServiceEnds`.
#' @examples
#' set.seed(2048)
#' arrival <- cumsum(rexp(10, 1/60))
#' service <- rexp(10, 1/150) + 20
#' Multiserver(arrival, service, 2)
Multiserver <- function(Arrivals, ServiceTimes, NumServers = 1) {
if (any(Arrivals <= 0 | ServiceTimes <= 0) || NumServers <= 0){
stop("Arrivals, ServiceTimes must be positive & NumServers must be positive" )
}
if (length(Arrivals) != length(ServiceTimes)){
stop("Arrivals and ServiceTimes must have the same length")
}
# Feed customers through a multiserver queue system to determine each
# customer's transition times.
NumCust <- length(Arrivals)  #  number of customer arrivals
# When each server is next available (this will be updated as the simulation proceeds):
AvailableFrom <- rep(0, NumServers)
# i.e., when the nth server will next be available
# These variables will be filled up as the simulation proceeds:
ChosenServer <- ServiceBegins <- ServiceEnds <- rep(0, NumCust)
# ChosenServer = which server the ith customer will use
# ServiceBegins = when the ith customer's service starts
# ServiceEnds = when the ith customer's service ends
# This loop calculates the queue system's "Transitions by Customer":
for (i in seq_along(Arrivals)){
# go to next available server
avail <-  min(AvailableFrom)
ChosenServer[i] <- which.min(AvailableFrom)
# service begins as soon as server & customer are both ready
ServiceBegins[i] <- max(avail, Arrivals[i])
ServiceEnds[i] <- ServiceBegins[i] + ServiceTimes[i]
# server becomes available again after serving ith customer
AvailableFrom[ChosenServer[i]] <- ServiceEnds[i]
}
out <- data.frame(Arrivals, ServiceBegins, ChosenServer, ServiceEnds)
return(out)
}
bank <- read.csv("D:/Thao MQ/Stat1378/PROBLEM SET 2/bank.csv")
View(bank)
devtools::load_all()
devtools::check()
devtools::document()
# install.packages("gitcreds")
gitcreds::gitcreds_set()
devtools::check()
# install.packages("gitcreds")
gitcreds::gitcreds_set()
gitcreds::gitcreds_set()
usethis::use_testthat()
usethis::use_test("multiserve0r")
library(testthat)
library(prasieme)
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
library(testthat)
library(prasieme)
library(testthat)
library(prasiseme)
library(testthat)
library(praiseme)
test_that("Multiserver outputs correct structure", {
set.seed(2048)
arrival <- cumsum(rexp(10, 1/60))
service <- rexp(10, 1/150) + 20
result <- Multiserver(arrival, service, 2)
expect_equal(ncol(result), 4)
expect_named(result, c("Arrivals", "ServiceBegins", "ChosenServer", "ServiceEnds"))
})
test_that("Multiserver handles zero customers", {
result <- Multiserver(numeric(0), numeric(0), 2)
expect_equal(nrow(result), 0)
})
devtools::test()
devtools::test()
Multiserver <- function(Arrivals, ServiceTimes, NumServers = 1) {
if (any(Arrivals <= 0 | ServiceTimes <= 0) || NumServers <= 0){
stop("Arrivals, ServiceTimes must be positive & NumServers must be positive" )
}
if (length(Arrivals) != length(ServiceTimes)){
stop("Arrivals and ServiceTimes must have the same length")
}
NumCust <- length(Arrivals)
AvailableFrom <- rep(0, NumServers)
ChosenServer <- ServiceBegins <- ServiceEnds <- rep(0, NumCust)
for (i in seq_along(Arrivals)){
avail <- min(AvailableFrom)
ChosenServer[i] <- which.min(AvailableFrom)
ServiceBegins[i] <- max(avail, Arrivals[i])
ServiceEnds[i] <- ServiceBegins[i] + ServiceTimes[i]
AvailableFrom[ChosenServer[i]] <- ServiceEnds[i]
}
out <- tibble::tibble(Arrivals, ServiceBegins, ChosenServer, ServiceEnds)
return(out)
}
devtools::document()
